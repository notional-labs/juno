// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/pegasus/go/pkg/mod/github.com/!cosm!wasm/wasmvm@v1.0.0-soon2.0.20211209162446-b96c92d21aaf/api/lib.go:1:1
package api

// #include <stdlib.h>
// #include "bindings.h"
import _ "unsafe"

import (
	"fmt"
	"runtime"
	"syscall"

	"github.com/CosmWasm/wasmvm/types"
)

// Value types
type cint =  /*line :16:13*/_Ctype_int /*line :16:18*/
type cbool =  /*line :17:14*/_Ctype_bool /*line :17:20*/
type cusize =  /*line :18:15*/_Ctype_size_t /*line :18:23*/
type cu8 =  /*line :19:12*/_Ctype_uint8_t /*line :19:21*/
type cu32 =  /*line :20:13*/_Ctype_uint32_t /*line :20:23*/
type cu64 =  /*line :21:13*/_Ctype_uint64_t /*line :21:23*/
type ci8 =  /*line :22:12*/_Ctype_int8_t /*line :22:20*/
type ci32 =  /*line :23:13*/_Ctype_int32_t /*line :23:22*/
type ci64 =  /*line :24:13*/_Ctype_int64_t /*line :24:22*/

// Pointers
type cu8_ptr = * /*line :27:17*/_Ctype_uint8_t /*line :27:26*/

type Cache struct {
	ptr * /*line :30:7*/_Ctype_cache_t /*line :30:16*/
}

type Querier = types.Querier

func InitCache(dataDir string, supportedFeatures string, cacheSize uint32, instanceMemoryLimit uint32) (Cache, error) {
	dataDirBytes := []byte(dataDir)
	supportedFeaturesBytes := []byte(supportedFeatures)

	d := makeView(dataDirBytes)
	defer runtime.KeepAlive(dataDirBytes)
	f := makeView(supportedFeaturesBytes)
	defer runtime.KeepAlive(supportedFeaturesBytes)

	errmsg := newUnmanagedVector(nil)

	ptr, err := func() (*_Ctype_struct_cache_t, error){ var _cgo0 _Ctype_struct_ByteSliceView = /*line :46:27*/d; var _cgo1 _Ctype_struct_ByteSliceView = /*line :46:30*/f; var _cgo2 _Ctype_uint32_t = /*line :46:33*/cu32(cacheSize); var _cgo3 _Ctype_uint32_t = /*line :46:50*/cu32(instanceMemoryLimit); _cgoBase4 := /*line :46:77*/&errmsg; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgoBase4, 0 == 0); return _C2func_init_cache(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if err != nil {
		return Cache{}, errorWithMessage(err, errmsg)
	}
	return Cache{ptr: ptr}, nil
}

func ReleaseCache(cache Cache) {
	( /*line :54:2*/_Cfunc_release_cache /*line :54:16*/)(cache.ptr)
}

func Create(cache Cache, wasm []byte) ([]byte, error) {
	w := makeView(wasm)
	defer runtime.KeepAlive(wasm)
	errmsg := newUnmanagedVector(nil)
	checksum, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :61:31*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :61:42*/w; _cgoBase2 := /*line :61:45*/&errmsg; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgoBase2, 0 == 0); return _C2func_save_wasm(_cgo0, _cgo1, _cgo2); }()
	if err != nil {
		return nil, errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(checksum), nil
}

func GetCode(cache Cache, checksum []byte) ([]byte, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	errmsg := newUnmanagedVector(nil)
	wasm, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :72:27*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :72:38*/cs; _cgoBase2 := /*line :72:42*/&errmsg; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgoBase2, 0 == 0); return _C2func_load_wasm(_cgo0, _cgo1, _cgo2); }()
	if err != nil {
		return nil, errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(wasm), nil
}

func Pin(cache Cache, checksum []byte) error {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	errmsg := newUnmanagedVector(nil)
	_, err := func() (_Ctype_void, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :83:18*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :83:29*/cs; _cgoBase2 := /*line :83:33*/&errmsg; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgoBase2, 0 == 0); return _C2func_pin(_cgo0, _cgo1, _cgo2); }()
	if err != nil {
		return errorWithMessage(err, errmsg)
	}
	return nil
}

func Unpin(cache Cache, checksum []byte) error {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	errmsg := newUnmanagedVector(nil)
	_, err := func() (_Ctype_void, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :94:20*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :94:31*/cs; _cgoBase2 := /*line :94:35*/&errmsg; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgoBase2, 0 == 0); return _C2func_unpin(_cgo0, _cgo1, _cgo2); }()
	if err != nil {
		return errorWithMessage(err, errmsg)
	}
	return nil
}

func AnalyzeCode(cache Cache, checksum []byte) (*types.AnalysisReport, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	errmsg := newUnmanagedVector(nil)
	report, err := func() (_Ctype_struct_AnalysisReport, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :105:32*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :105:43*/cs; _cgoBase2 := /*line :105:47*/&errmsg; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgoBase2, 0 == 0); return _C2func_analyze_code(_cgo0, _cgo1, _cgo2); }()
	if err != nil {
		return nil, errorWithMessage(err, errmsg)
	}
	res := types.AnalysisReport{
		HasIBCEntryPoints: bool(report.has_ibc_entry_points),
		RequiredFeatures:  string(copyAndDestroyUnmanagedVector(report.required_features)),
	}
	return &res, nil
}

func GetMetrics(cache Cache) (*types.Metrics, error) {
	errmsg := newUnmanagedVector(nil)
	metrics, err := func() (_Ctype_struct_Metrics, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :118:32*/cache.ptr; _cgoBase1 := /*line :118:43*/&errmsg; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgoBase1, 0 == 0); return _C2func_get_metrics(_cgo0, _cgo1); }()
	if err != nil {
		return nil, errorWithMessage(err, errmsg)
	}

	return &types.Metrics{
		HitsPinnedMemoryCache:     uint32(metrics.hits_pinned_memory_cache),
		HitsMemoryCache:           uint32(metrics.hits_memory_cache),
		HitsFsCache:               uint32(metrics.hits_fs_cache),
		Misses:                    uint32(metrics.misses),
		ElementsPinnedMemoryCache: uint64(metrics.elements_pinned_memory_cache),
		ElementsMemoryCache:       uint64(metrics.elements_memory_cache),
		SizePinnedMemoryCache:     uint64(metrics.size_pinned_memory_cache),
		SizeMemoryCache:           uint64(metrics.size_memory_cache),
	}, nil
}

func Instantiate(
	cache Cache,
	checksum []byte,
	env []byte,
	info []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	i := makeView(info)
	defer runtime.KeepAlive(info)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	// set up a new stack frame to handle iterators
	counter := startContract()
	defer endContract(counter)

	dbState := buildDBState(store, counter)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :168:28*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :168:39*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :168:43*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :168:46*/i; var _cgo4 _Ctype_struct_ByteSliceView = /*line :168:49*/m; var _cgo5 _Ctype_struct_Db = /*line :168:52*/db; var _cgo6 _Ctype_struct_GoApi = /*line :168:56*/a; var _cgo7 _Ctype_struct_GoQuerier = /*line :168:59*/q; var _cgo8 _Ctype_uint64_t = /*line :168:62*/cu64(gasLimit); var _cgo9 _Ctype__Bool = /*line :168:78*/cbool(printDebug); var _cgo10 *_Ctype_uint64_t = /*line :168:97*/&gasUsed; _cgoBase11 := /*line :168:107*/&errmsg; _cgo11 := _cgoBase11; _cgoCheckPointer(_cgoBase11, 0 == 0); return _C2func_instantiate(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10, _cgo11); }()
	if err != nil && err.(syscall.Errno) != ( /*line :169:42*/_Ciconst_ErrnoValue_Success /*line :169:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func Execute(
	cache Cache,
	checksum []byte,
	env []byte,
	info []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	i := makeView(info)
	defer runtime.KeepAlive(info)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	// set up a new stack frame to handle iterators
	counter := startContract()
	defer endContract(counter)

	dbState := buildDBState(store, counter)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :209:24*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :209:35*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :209:39*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :209:42*/i; var _cgo4 _Ctype_struct_ByteSliceView = /*line :209:45*/m; var _cgo5 _Ctype_struct_Db = /*line :209:48*/db; var _cgo6 _Ctype_struct_GoApi = /*line :209:52*/a; var _cgo7 _Ctype_struct_GoQuerier = /*line :209:55*/q; var _cgo8 _Ctype_uint64_t = /*line :209:58*/cu64(gasLimit); var _cgo9 _Ctype__Bool = /*line :209:74*/cbool(printDebug); var _cgo10 *_Ctype_uint64_t = /*line :209:93*/&gasUsed; _cgoBase11 := /*line :209:103*/&errmsg; _cgo11 := _cgoBase11; _cgoCheckPointer(_cgoBase11, 0 == 0); return _C2func_execute(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10, _cgo11); }()
	if err != nil && err.(syscall.Errno) != ( /*line :210:42*/_Ciconst_ErrnoValue_Success /*line :210:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func Migrate(
	cache Cache,
	checksum []byte,
	env []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	// set up a new stack frame to handle iterators
	counter := startContract()
	defer endContract(counter)

	dbState := buildDBState(store, counter)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :247:24*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :247:35*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :247:39*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :247:42*/m; var _cgo4 _Ctype_struct_Db = /*line :247:45*/db; var _cgo5 _Ctype_struct_GoApi = /*line :247:49*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :247:52*/q; var _cgo7 _Ctype_uint64_t = /*line :247:55*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :247:71*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :247:90*/&gasUsed; _cgoBase10 := /*line :247:100*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_migrate(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :248:42*/_Ciconst_ErrnoValue_Success /*line :248:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func Sudo(
	cache Cache,
	checksum []byte,
	env []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	// set up a new stack frame to handle iterators
	counter := startContract()
	defer endContract(counter)

	dbState := buildDBState(store, counter)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :285:21*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :285:32*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :285:36*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :285:39*/m; var _cgo4 _Ctype_struct_Db = /*line :285:42*/db; var _cgo5 _Ctype_struct_GoApi = /*line :285:46*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :285:49*/q; var _cgo7 _Ctype_uint64_t = /*line :285:52*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :285:68*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :285:87*/&gasUsed; _cgoBase10 := /*line :285:97*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_sudo(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :286:42*/_Ciconst_ErrnoValue_Success /*line :286:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func Reply(
	cache Cache,
	checksum []byte,
	env []byte,
	reply []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	r := makeView(reply)
	defer runtime.KeepAlive(reply)

	// set up a new stack frame to handle iterators
	counter := startContract()
	defer endContract(counter)

	dbState := buildDBState(store, counter)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :323:22*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :323:33*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :323:37*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :323:40*/r; var _cgo4 _Ctype_struct_Db = /*line :323:43*/db; var _cgo5 _Ctype_struct_GoApi = /*line :323:47*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :323:50*/q; var _cgo7 _Ctype_uint64_t = /*line :323:53*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :323:69*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :323:88*/&gasUsed; _cgoBase10 := /*line :323:98*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_reply(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :324:42*/_Ciconst_ErrnoValue_Success /*line :324:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func Query(
	cache Cache,
	checksum []byte,
	env []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	// set up a new stack frame to handle iterators
	counter := startContract()
	defer endContract(counter)

	dbState := buildDBState(store, counter)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :361:22*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :361:33*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :361:37*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :361:40*/m; var _cgo4 _Ctype_struct_Db = /*line :361:43*/db; var _cgo5 _Ctype_struct_GoApi = /*line :361:47*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :361:50*/q; var _cgo7 _Ctype_uint64_t = /*line :361:53*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :361:69*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :361:88*/&gasUsed; _cgoBase10 := /*line :361:98*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_query(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :362:42*/_Ciconst_ErrnoValue_Success /*line :362:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func IBCChannelOpen(
	cache Cache,
	checksum []byte,
	env []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	// set up a new stack frame to handle iterators
	counter := startContract()
	defer endContract(counter)

	dbState := buildDBState(store, counter)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :399:33*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :399:44*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :399:48*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :399:51*/m; var _cgo4 _Ctype_struct_Db = /*line :399:54*/db; var _cgo5 _Ctype_struct_GoApi = /*line :399:58*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :399:61*/q; var _cgo7 _Ctype_uint64_t = /*line :399:64*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :399:80*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :399:99*/&gasUsed; _cgoBase10 := /*line :399:109*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_ibc_channel_open(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :400:42*/_Ciconst_ErrnoValue_Success /*line :400:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func IBCChannelConnect(
	cache Cache,
	checksum []byte,
	env []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	// set up a new stack frame to handle iterators
	counter := startContract()
	defer endContract(counter)

	dbState := buildDBState(store, counter)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :437:36*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :437:47*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :437:51*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :437:54*/m; var _cgo4 _Ctype_struct_Db = /*line :437:57*/db; var _cgo5 _Ctype_struct_GoApi = /*line :437:61*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :437:64*/q; var _cgo7 _Ctype_uint64_t = /*line :437:67*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :437:83*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :437:102*/&gasUsed; _cgoBase10 := /*line :437:112*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_ibc_channel_connect(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :438:42*/_Ciconst_ErrnoValue_Success /*line :438:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func IBCChannelClose(
	cache Cache,
	checksum []byte,
	env []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	// set up a new stack frame to handle iterators
	counter := startContract()
	defer endContract(counter)

	dbState := buildDBState(store, counter)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :475:34*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :475:45*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :475:49*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :475:52*/m; var _cgo4 _Ctype_struct_Db = /*line :475:55*/db; var _cgo5 _Ctype_struct_GoApi = /*line :475:59*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :475:62*/q; var _cgo7 _Ctype_uint64_t = /*line :475:65*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :475:81*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :475:100*/&gasUsed; _cgoBase10 := /*line :475:110*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_ibc_channel_close(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :476:42*/_Ciconst_ErrnoValue_Success /*line :476:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func IBCPacketReceive(
	cache Cache,
	checksum []byte,
	env []byte,
	packet []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	pa := makeView(packet)
	defer runtime.KeepAlive(packet)

	// set up a new stack frame to handle iterators
	counter := startContract()
	defer endContract(counter)

	dbState := buildDBState(store, counter)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :513:35*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :513:46*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :513:50*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :513:53*/pa; var _cgo4 _Ctype_struct_Db = /*line :513:57*/db; var _cgo5 _Ctype_struct_GoApi = /*line :513:61*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :513:64*/q; var _cgo7 _Ctype_uint64_t = /*line :513:67*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :513:83*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :513:102*/&gasUsed; _cgoBase10 := /*line :513:112*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_ibc_packet_receive(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :514:42*/_Ciconst_ErrnoValue_Success /*line :514:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func IBCPacketAck(
	cache Cache,
	checksum []byte,
	env []byte,
	ack []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	ac := makeView(ack)
	defer runtime.KeepAlive(ack)

	// set up a new stack frame to handle iterators
	counter := startContract()
	defer endContract(counter)

	dbState := buildDBState(store, counter)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :551:31*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :551:42*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :551:46*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :551:49*/ac; var _cgo4 _Ctype_struct_Db = /*line :551:53*/db; var _cgo5 _Ctype_struct_GoApi = /*line :551:57*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :551:60*/q; var _cgo7 _Ctype_uint64_t = /*line :551:63*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :551:79*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :551:98*/&gasUsed; _cgoBase10 := /*line :551:108*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_ibc_packet_ack(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :552:42*/_Ciconst_ErrnoValue_Success /*line :552:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func IBCPacketTimeout(
	cache Cache,
	checksum []byte,
	env []byte,
	packet []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	pa := makeView(packet)
	defer runtime.KeepAlive(packet)

	// set up a new stack frame to handle iterators
	counter := startContract()
	defer endContract(counter)

	dbState := buildDBState(store, counter)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :589:35*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :589:46*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :589:50*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :589:53*/pa; var _cgo4 _Ctype_struct_Db = /*line :589:57*/db; var _cgo5 _Ctype_struct_GoApi = /*line :589:61*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :589:64*/q; var _cgo7 _Ctype_uint64_t = /*line :589:67*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :589:83*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :589:102*/&gasUsed; _cgoBase10 := /*line :589:112*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_ibc_packet_timeout(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :590:42*/_Ciconst_ErrnoValue_Success /*line :590:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

/**** To error module ***/

func errorWithMessage(err error, b  /*line :599:36*/_Ctype_UnmanagedVector /*line :599:53*/) error {
	// this checks for out of gas as a special case
	if errno, ok := err.(syscall.Errno); ok && int(errno) == 2 {
		return types.OutOfGasError{}
	}
	msg := copyAndDestroyUnmanagedVector(b)
	if msg == nil {
		return err
	}
	return fmt.Errorf("%s", string(msg))
}
